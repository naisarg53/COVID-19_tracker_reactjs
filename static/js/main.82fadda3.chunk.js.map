{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/StateTable/StateTable.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/StateTable/StateTable.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailtData","total","date","reportDate","fetchCountries","countries","name","fetchStates","stateData","provinceState","active","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFecthedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","StateTable","fetchedState","setfetchedState","StyledTableCell","withStyles","theme","head","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","provinceData","classes","TableContainer","Paper","Table","stickyHeader","aria-label","TableHead","width","align","TableBody","scope","style","App","state","fetchedData","setState","this","classNames","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,2NCiEpJC,EA3DD,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WAEnD,OAAIH,EAIA,yBAAKI,UAAWC,IAAOC,WACnB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,WACzE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKxB,EAAUyB,MACfC,SAAU,IACVC,UAAU,OAGlB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,oCAGR,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,YACzE,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKvB,EAAUwB,MACfC,SAAU,IACVC,UAAU,OAGlB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,uCAGR,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOH,SACzE,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKtB,EAAOuB,MACZC,SAAU,IACVC,UAAU,OAGlB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,uCA/CT,c,yBCRTQ,EAAM,iCAICC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAgBJ,EAEhBE,IAEAE,EAAa,UAAMJ,EAAN,sBAAuBE,IALnB,kBAQoDG,IAAMC,IAAIF,GAR9D,2BAQTnC,KAAQC,EARC,EAQDA,UAAWC,EARV,EAQUA,UAAWC,EARrB,EAQqBA,OAAQC,EAR7B,EAQ6BA,WAR7B,kBAUV,CAAEH,YAAWC,YAAWC,SAAQC,eAVtB,kCAYjBkC,QAAQC,IAAR,MAZiB,0DAAH,sDAgBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAECE,IAAMC,IArBpB,wCAmBa,uBAEdrC,EAFc,EAEdA,KAEFyC,EAAezC,EAAK0C,KAAI,SAACC,GAAD,MAAgB,CAC1C1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAMF,EAAUG,eAPE,kBAUfL,GAVe,gCAYtBH,QAAQC,IAAR,MAZsB,yDAAH,qDAgBdQ,EAAc,uCAAG,8BAAAb,EAAA,+EAEgBE,IAAMC,IApC/B,4CAkCS,uBAENW,EAFM,EAEdhD,KAAQgD,UAFM,kBAIfA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SAJpB,gCAMtBX,QAAQC,IAAR,MANsB,yDAAH,qDAUdW,EAAW,uCAAG,WAAOjB,GAAP,mBAAAC,EAAA,+EAEIE,IAAMC,IAAN,UAAaN,EAAb,sBAA8BE,EAAQA,QAAtC,eAFJ,uBAEXjC,EAFW,EAEXA,KAEFyC,EAAezC,EAAK0C,KAAI,SAACS,GAAD,MAAgB,CAC1CC,cAAeD,EAAUC,cACzBnD,UAAWkD,EAAUlD,UACrBoD,OAAQF,EAAUE,OAClBnD,UAAWiD,EAAUjD,UACrBC,OAAQgD,EAAUhD,WAGtBmC,QAAQC,IAAIE,GAZO,kBAaZA,GAbY,kCAenBH,QAAQC,IAAR,MAfmB,0DAAH,sD,yBCoBTe,EA9DD,SAAC,GAAyD,IAAD,IAAtDtD,KAAQC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAU8B,EAAc,EAAdA,QAAc,EACjCsB,mBAAS,IADwB,mBAC5DC,EAD4D,KACjDC,EADiD,KAGnEC,qBAAU,YACQ,uCAAG,sBAAAxB,EAAA,kEACbuB,EADa,SACMjB,IADN,6EAAH,qDAKdmB,KACD,IAGH,IAAMC,EACFJ,EAAUK,OAER,kBAAC,IAAD,CACU7D,KAAM,CACF8D,OAAQN,EAAUd,KAAI,qBAAGG,QACzBkB,SAAU,CAAC,CACP/D,KAAMwD,EAAUd,KAAI,qBAAGzC,aACvB+D,MAAO,WACPC,YAAa,UACbC,MAAM,GACX,CACKlE,KAAMwD,EAAUd,KAAI,qBAAGvC,UACvB6D,MAAO,SACPC,YAAa,MACbE,gBAAiB,uBACjBD,MAAM,OAGrB,KAGHE,EACFnE,EAEQ,kBAAC,IAAD,CACID,KAAM,CACF8D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CAAC,CACPC,MAAO,SACPG,gBAAiB,CAAC,oBAAqB,oBAAqB,qBAC5DnE,KAAM,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAGxD2C,QAAS,CACLC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAqBxC,OAGrD,KAGhB,OACI,yBAAK5B,UAAWC,IAAOC,WAClB0B,EAAUmC,EAAWR,I,mCClCnBc,EAtBO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACCpB,mBAAS,IADV,mBACxCqB,EADwC,KACtBC,EADsB,KAY/C,OATAnB,qBAAU,YACQ,uCAAG,sBAAAxB,EAAA,kEACb2C,EADa,SACa9B,IADb,6EAAH,qDAGdY,KACD,CAACkB,IAKA,kBAACC,EAAA,EAAD,CAAazE,UAAWC,IAAOyE,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAO1D,SACxE,4BAAQA,MAAM,IAAd,UACCkD,EAAiBlC,KAAI,SAACT,EAASoD,GAAV,OAAgB,4BAAQC,IAAKD,EAAG3D,MAAOO,GAAUA,S,gGCyDxEsD,EA1EI,SAACtD,GAAa,IAAD,EAEYsB,mBAAS,IAFrB,mBAErBiC,EAFqB,KAEPC,EAFO,KAI5B/B,qBAAU,YACQ,uCAAG,sBAAAxB,EAAA,kEACbuD,EADa,SACSvC,EAAYjB,GADrB,6EAAH,qDAGd0B,GACArB,QAAQC,IAAIiD,KACb,CAACvD,IAEJ,IAAMyD,EAAkBC,aAAW,SAACC,GAAD,MAAY,CAC3CC,KAAM,CACF1B,gBAAiByB,EAAME,QAAQC,OAAOC,MACtC3E,MAAOuE,EAAME,QAAQC,OAAOE,OAEhCC,KAAM,CACFC,SAAU,OANMR,CAQpBS,KAEEC,EAAiBV,aAAW,SAACC,GAAD,MAAY,CAC1CU,KAAM,CACF,qBAAsB,CAClBnC,gBAAiByB,EAAME,QAAQS,OAAOC,WAH3Bb,CAMnBc,KAEEC,EAAYC,YAAW,CACzBC,MAAO,CACHC,SAAU,OAIZC,EAAetB,EACfuB,EAAUL,IAChB,OACI,yBAAKrG,UAAWC,IAAOC,WAClBuG,EAAajD,OAAS,EACnB,kDAAwB5B,EAAQA,SAAiB,kDAAwBA,EAAQA,QAAhC,qBACpD6E,EAAajD,OAAS,EACnB,kBAACmD,EAAA,EAAD,CAAgBpG,UAAWqG,KACvB,kBAACC,EAAA,EAAD,CAAO7G,UAAW0G,EAAQH,MAAO9F,GAAI,GAAIC,GAAI,EAAGoG,cAAY,EAACC,aAAW,gBACpE,kBAACC,EAAA,EAAD,KACI,kBAACZ,EAAA,EAAD,KACI,kBAACf,EAAD,CAAiB4B,MAAM,OAAvB,UACA,kBAAC5B,EAAD,CAAiB6B,MAAM,OAAOD,MAAM,MAApC,aACA,kBAAC5B,EAAD,CAAiB6B,MAAM,OAAOD,MAAM,MAApC,UACA,kBAAC5B,EAAD,CAAiB6B,MAAM,OAAOD,MAAM,MAApC,aACA,kBAAC5B,EAAD,CAAiB6B,MAAM,OAAOD,MAAM,MAApC,YAGR,kBAACE,EAAA,EAAD,KACKV,EAAajD,OAAS,EAAIiD,EAAapE,KAAI,SAAC1C,GAAD,OACxC,kBAACqG,EAAD,CAAgBf,IAAKtF,EAAKoD,eACtB,kBAACsC,EAAD,CAAiB9E,UAAU,KAAK6G,MAAM,OACjCzH,EAAKoD,eAEV,kBAACsC,EAAD,CAAiBgC,MAAO,CAAErG,MAAO,0BAA4BkG,MAAM,QAAQvH,EAAKC,WAChF,kBAACyF,EAAD,CAAiBgC,MAAO,CAAErG,MAAO,wBAA0BkG,MAAM,QAAQvH,EAAKqD,QAC9E,kBAACqC,EAAD,CAAiBgC,MAAO,CAAErG,MAAO,wBAA0BkG,MAAM,QAAQvH,EAAKE,WAC9E,kBAACwF,EAAD,CAAiBgC,MAAO,CAAErG,MAAO,wBAA0BkG,MAAM,QAAQvH,EAAKG,YAEjF,uDAIjB,O,wCC9BDwH,G,4MApCXC,MAAQ,CACJ5H,KAAM,GACNiC,QAAS,I,EAUb0C,oB,uCAAsB,WAAO1C,GAAP,eAAAC,EAAA,sEAEQF,EAAUC,GAFlB,OAEZ4F,EAFY,OAMlB,EAAKC,SAAS,CAAE9H,KAAM6H,EAAa5F,QAASA,IAN1B,2C,wPANQD,I,OAApB6F,E,OAENE,KAAKD,SAAS,CAAE9H,KAAM6H,I,qIAahB,IAAD,EACqBE,KAAKH,MAAvB5H,EADH,EACGA,KAAMiC,EADT,EACSA,QAEd,OACI,yBAAK5B,UAAWC,KAAOC,WACnB,yBAAKyH,WAAY1H,KAAO2H,MAAOC,IAAKC,KAAaC,IAAI,aACrD,kBAAC,EAAD,CAAOpI,KAAMA,IACb,kBAAC,EAAD,CAAe2E,oBAAqBoD,KAAKpD,sBACzC,kBAAC,EAAD,CAAO3E,KAAMA,EAAMiC,QAASA,IAC3BA,EAAU,kBAAC,EAAD,CAAYA,QAASA,IAAc,U,GAhC5CoG,IAAMC,WCHxBC,IAASC,OACL,kBAAC,GAAD,MACAC,SAASC,eAAe,U,mBCL5B7I,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,gC,mBCD9BD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.82fadda3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__VLttA\",\"card\":\"Cards_card__3qw6C\",\"infected\":\"Cards_infected__I2xFz\",\"recovered\":\"Cards_recovered__1VVQR\",\"deaths\":\"Cards_deaths__2pz9w\"};","import React from 'react';\r\n\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames'; \r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    //console.log(props);\r\n    if(!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">No of Active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">No of Recovered cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">No of Deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\nconst dailyurl = 'https://covid19.mathdro.id/api/daily';\r\nconst countriesurl = 'https://covid19.mathdro.id/api/countries';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country) {\r\n        //changeableUrl = url+'/countries' + '/country=' + country;\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n       \r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(dailyurl);\r\n\r\n        const modifiedData = data.map((dailtData) => ({\r\n            confirmed: dailtData.confirmed.total,\r\n            deaths: dailtData.deaths.total,\r\n            date: dailtData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(countriesurl);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n// https://covid19.mathdro.id/api/countries/India/confirmed\r\nexport const fetchStates = async (country) => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/countries/${country.country}/confirmed`);\r\n        \r\n        const modifiedData = data.map((stateData) => ({\r\n            provinceState: stateData.provinceState,\r\n            confirmed: stateData.confirmed,\r\n            active: stateData.active,\r\n            recovered: stateData.recovered,\r\n            deaths: stateData.deaths,\r\n        }));\r\n\r\n        console.log(modifiedData);\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        //console.log(dailyData);\r\n        fetchAPI();\r\n    }, []); // [] so it only happens once\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length        // daily data of first day is available than line chart\r\n        ? (\r\n          <Line\r\n                    data={{\r\n                        labels: dailyData.map(({ date }) => date),\r\n                        datasets: [{\r\n                            data: dailyData.map(({ confirmed }) => confirmed),\r\n                            label: 'Infected',\r\n                            borderColor: '#3333ff',\r\n                            fill: true,\r\n                    }, {\r\n                            data: dailyData.map(({ deaths }) => deaths),\r\n                            label: 'Deaths',\r\n                            borderColor: 'red',\r\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                            fill: true,\r\n                    }],\r\n            }}\r\n        />): null\r\n); \r\n\r\n    const barChart = (\r\n        confirmed\r\n            ? (\r\n                <Bar\r\n                    data={{\r\n                        labels: ['Infected', 'Recovered', 'Deaths'],\r\n                        datasets: [{\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\r\n                            data: [confirmed.value, recovered.value, deaths.value]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text:`Current state in ${country}` },\r\n                    }}\r\n                />\r\n                ) : null\r\n);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n)\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFecthedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFecthedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setFecthedCountries]); //change only when select option changes\r\n\r\n    //console.log(fetchedCountries);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker","import React, { useState, useEffect } from 'react';\r\nimport styles from './StateTable.module.css';\r\nimport { fetchStates } from '../../api';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\n\r\nconst StateTable = (country) => {\r\n\r\n    const [fetchedState, setfetchedState] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setfetchedState(await fetchStates(country));\r\n        }\r\n        fetchAPI();\r\n        console.log(fetchedState);\r\n    }, [country]);\r\n\r\n    const StyledTableCell = withStyles((theme) => ({  // table column\r\n        head: {\r\n            backgroundColor: theme.palette.common.black,\r\n            color: theme.palette.common.white,\r\n        },\r\n        body: {\r\n            fontSize: 14,\r\n        },\r\n    }))(TableCell);\r\n\r\n    const StyledTableRow = withStyles((theme) => ({  // table row\r\n        root: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n    }))(TableRow);\r\n\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 100,\r\n        },\r\n    });\r\n\r\n    const provinceData = fetchedState;\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={styles.container}>\r\n            {provinceData.length > 1 ? (\r\n                <h3>Statewise Data for {country.country}</h3>) : <h3>Statewise Data for {country.country} is not Available</h3>}\r\n            {provinceData.length > 1 ? (\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.table} xs={12} md={3} stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <StyledTableCell width=\"100\">States</StyledTableCell>\r\n                                <StyledTableCell align=\"left\" width=\"50\">Confirmed</StyledTableCell>\r\n                                <StyledTableCell align=\"left\" width=\"50\">Active</StyledTableCell>\r\n                                <StyledTableCell align=\"left\" width=\"50\">Recovered</StyledTableCell>\r\n                                <StyledTableCell align=\"left\" width=\"50\">Deaths</StyledTableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {provinceData.length > 1 ? provinceData.map((data) => (\r\n                                <StyledTableRow key={data.provinceState}>\r\n                                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                                        {data.provinceState}\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell style={{ color: 'rgba(0, 139, 139, 0.8)' }} align=\"left\">{data.confirmed}</StyledTableCell>\r\n                                    <StyledTableCell style={{ color: 'rgba(0, 0, 255, 0.8)' }} align=\"left\">{data.active}</StyledTableCell>\r\n                                    <StyledTableCell style={{ color: 'rgba(0, 140, 0, 0.8)' }} align=\"left\">{data.recovered}</StyledTableCell>\r\n                                    <StyledTableCell style={{ color: 'rgba(255, 0, 0, 0.8)' }} align=\"left\">{data.deaths}</StyledTableCell>\r\n                                </StyledTableRow>\r\n                            )) : 'Statewise Data for this Country is not Available.'}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StateTable;","import React from 'react';\n\nimport { Chart, CountryPicker, Cards, StateTable } from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({ data: fetchedData })\r\n    //    console.log(data);\r\n    }\n\n    handleCountryChange = async (country) => {\n\n        const fetchedData = await fetchData(country);\n        //console.log(fetchedData);\n        //console.log(country);\r\n        //fetch data and set state\r\n        this.setState({ data: fetchedData, country: country });\r\n    }\n\n    render() {\r\n        const { data, country } = this.state;\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <img classNames={styles.image} src={coronaImage} alt=\"COVID-19\" />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} />\r\n                {country ? <StateTable country={country} /> : null}\r\n            </div>\r\n            )\r\n    }\r\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2oQZK\",\"image\":\"App_image__3OTYj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__bKUjP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2lALN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StateTable_container__2Rytk\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}